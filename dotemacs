;;                   __  _ __ ___   __ _  ___ ___
;;                  / _ \ '_ ` _ \ / _` |/ __/ __|
;;                 |  __/ | | | | | (_| | (__\__ \
;;                (_)___|_| |_| |_|\__,_|\___|___/
;;                               .-.
;; =--------------------------   /v\  ----------------------------=
;; = lapipaplena.org            // \\              templix@gmx.es =
;; =-----------------          /(   )\        --------------------=
;; =                            ^^-^^                             =
;; =         https://tractatuslapipaplena.herokuapp.com/          =
;; =--------------------------------------------------------------=
;
;
;;;;;;;;;;;;;;;;;;; Ajustes generales;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
;;; Algunqs cosas que podemos implementar en el arranque:
;(split-window-horizontally)   ;; Iniciar con la ventana dividida es dos
;(other-window 1)              ;; Moverse al segundo panel
;(shell)                       ;; Lanzar una shell
;(rename-buffer "shell-1")     ;; Enumerarla como "shell-1"
;(other-window 1)              ;; Ir nuevamente al primer panel
;
;; Sin mensaje de bienvenida:
(setq inhibit-startup-message t)
;
;;; tipos de sistema
(defun insert-system-type()
(interactive)
(insert (format "%s" system-type)))
;
;;; nombre del sistema
(defun insert-system-name()
(interactive)
(insert (format "%s" system-name)))
;
;;; Diferenciar lo que es texto de lo que son órdenes para el formateo del texto:
(global-font-lock-mode 1)
;
;;; Iluminar los parentesis y las llaves por parejas:
(show-paren-mode 1)
;
;;; Usar decoración de texto siguiente:
;;;(bash, la máxima  [t], latex, la mínima [1], un entremedio. Sería valor 2
(setq font-lock-maximum-decoration
      '((shell-mode . t) (latex-mode . 2)))
;
;;; Que muestre las salidas de shell en colores:
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;;; especificar directorio para las extensiones:
(add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp"))
;
;;; Modo inicial por defecto:
(setq default-major-mode 'text-mode)
;
;;; Dar permisos de execución al fichero si és un script y poderlo
;;; ejecutar con C-c e
(setq after-save-hook (quote (executable-make-buffer-file-executable-if-script-p)))
;
;;; Ver depuración de scripts de forma rápida:
;;; quickrum (https://raw.github.com/syohex/emacs-quickrun/master/quickrun.el)
(require 'quickrun)
;
;;; No hacer copias de seguredad ni crear archvoss #auto-save#
(setq make-backup-files nil)
(setq auto-save-default nil)
;;; Si quisiéramos copias de seguridad cada 2 minutos:
;(setq auto-save-timeout 120)
;;; Si quisiéramos copias de seguridad cada 20 modficaciones:
;(setq auto-save-interval 20)
;
;;; guardar la sessión al cerrar emacs i restaurarla
;;; al arrancar-lo de nuevo. Poner a cero [0] para desactivar:
(desktop-save-mode 1)
;
;;; No mostrar la barra del menú:
(menu-bar-mode -1)
;
;;; Esconder las contraseñas cuando se teclee:
(add-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt)
;
;;; Abre archivos comprimidos con gzip y bzip2:
(auto-compression-mode t)
;
;;; Reemplazar "yes" y "no" para "y" y "n" en el prompt
(fset 'yes-or-no-p 'y-or-n-p)
;
;;; Pedir confirmación para salir de emacs:
;(setq confirm-kill-emacs 'yes-or-no-p)
;
;;; Realzar la línea del foco. Atajo para activa/desactivar: C-c i
;;; y hacerlo con fondo azul:
(global-hl-line-mode 0)
(set-face-background 'hl-line "blue")
;
;;; Consultar indicador de bateria M-x display-battery-mode
;;; Activar indicador de bateria:
;(display-battery-mode 1)
;
;;; reloj con formato 24 horas
;;; Mostrar fecha y hora
(setq display-time-day-and-date t
      display-time-24hr-format t)
(display-time)
;
;;; Posar en català el calendari
(setq calendar-week-start-day 1
calendar-day-name-array ["Dg" "Dl" "Dt" "Dc" "Dj" "Dv" "Ds"]
calendar-month-name-array ["Gener" "Febrer" "Març" "Abril" "Maig" "Juny" "Juliol" "Agost" "Setembre" "Octubre" "Novembre" "Decembre"])
;;; Poner en castellano el calendario:
;calendar-day-name-array ["Lu" "Ma" "Mi" "Ju" "Vi" "Sa" "Do"]
;calendar-month-name-array ["Enero" "Febrero" "Marzo" "Abril" "Mayo" "Junio" "Julio" "Agosto" "Setiembre" "Octubre" "Noviembre" "Diciembre"])
;
;;; Añadir un espacio entre el número de linia y el texto de la línia:
(setq linum-format "%d ")
;
;;; Orden en el que se muestran los buffers según su importancia:
(setq ido-file-extensions-order '(".txt" ".tex" ".emacs"))
;
;;; Ignorar mayúsculas en modo ido:
(setq ido-case-fold t)
;
;;; Insensible a mayúsculas y minúsculas en las busquedas:
(setq case-fold-search nil)
;
;;; Habilitar coincidencia aproximada:
(setq ido-enable-flex-matching t)
;
;;; Redimensionar el minibuffer si es demasiado grande:
(follow-mode t)
;
;;; Usar espacio en lugar de tabulaciones:
(setq-default indent-tabs-mode nil)
;
;;; Que las tabulaciones sean de 4 espacios:
(setq tab-width 4)
;
;;; Eliminar espacios en blanco al final de la línia automáticament al guardar el archivo
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'write-file-hooks 'delete-trailing-whitespace nil t)
;
;;; Leer tambien el archivo de configuración:
(load "~/.gnu-emacs")
;
;;; Que los .emacs se abran en lisp-mode
(add-to-list 'auto-mode-alist '("\\.emacs$" . lisp-mode)
			      '("\\.gnu-emacs$" . lisp-mode))
;
;;; Mover a la papelera al borrar cosas:
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files")
;
;;; Codificación utf-8
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
;
;;; Guardar historial de archivos visitados incluso entre sesiones:
(savehist-mode 1)
;
;;; No truncar el archivo de mensajes aunque sea grande:
(setq message-log-max t)
;
;;; Cuando sea necesario, expandir verticalmente la ventana del minibuffer
;;; para contener el texto que se pone:
(setq resize-mini-windows t)
;
;;; alias para para eval-buffer:
(defalias 'eb 'eval-buffer)
;
;;; Formatear las línias de un texto a 70 espacios
;;;  (M-x auto-fill-mode) Para hacerlo permanente:
;(add-hook 'text-mode-hook 'turn-on-auto-fill)
;
;;; Mostrar la línea de modo al lado del número de línia:
(column-number-mode t)
;
;
;;; Si tenemos un archivo sensible (contraseñas, códigos...) podemos
;;; ocultarlo del archivo de configuración. Las siguientes lineas
;;; lo leen si existe.
(if (file-exists-p "~/.emacs.secrets")
        (load-file "~/.emacs.secrets"))
;
;;; Preservar enlaces duros del archivo que se está editando.
;;; especialmente importante si se edita archivos de sistema:
(setq backup-by-copying-when-linked t)
;
;;; Preservar el propietario y el grupo del archivo que se está editando.
;;; especialmente importante si se edita archivos como root:
(setq backup-by-copying-when-mismatch t)
;
;;; Introducir el depurador cada vez que se encuentre un error:
;(setq debug-on-error t)
;
;;; Que al abrir un pdf se active el doc-view-mode:
(setq auto-mode-alist
      '(("\\.pdf$" . doc-view-mode)))
;
;
;;;;;;;;;;;;;;;;;;;;;;;;; Keys;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Comentar trozos de codigo:
(global-set-key (kbd "C-c c") 'comment-region)
;;; Descomentar trozos de codigo:
(global-set-key (kbd "C-c u") 'uncomment-region)
;;; Ir a la línea...
(global-set-key (kbd "C-c g") 'goto-line)
;;; Abrir terminales:
(global-set-key (kbd "C-c t") 'multi-term-next)
(global-set-key (kbd "C-c T") 'multi-term) ;; Abrir nueva terminal
;;; Abrir firefox:
(global-set-key (kbd "C-c f") 'browse-url-firefox)
;;; Abrir una URL de w3m en el navegador externo:
(global-set-key (kbd "C-c a") 'w3m-external-view-this-url)
;;; Poner el cursor sobre una URL de un texto y abrirla en el firefox
;;; Creada la función w3mext
(global-set-key (kbd "C-c b") 'w3mext-open-link-or-image-or-url)
;;; executar scripts:
(global-set-key (kbd "C-c e") 'executable-interpret)
;;; executar scripts con quickrun:
(global-set-key (kbd "C-c r") 'quickrun)
;;; Abrir menu de los buffers abiertos:
(global-set-key (kbd "C-c m") 'buffer-menu)
;;; imprimir a ps (C-u M-x ps-print-buffer-with-faces)
;;; pasar a pdf: ps2pdf arxiu.ps arxiu.pdf
;(global-set-key (kbd "C-c i") 'ps-print-buffer-with-faces)
;;; Atajos de teclado para latex (skeleton)
;;; Resaltar la linea del foco:
(global-set-key (kbd "C-c i") 'global-hl-line-mode)
;;; skeleton dialeg:
(global-set-key (kbd "C-c d") 'dialeg)
;;; skeleton quadre:
(global-set-key (kbd "C-c q") 'quadre)
;;; skeleton argument:
(global-set-key (kbd "C-c z") 'argument)
;;; skeleton plantilla:
(global-set-key (kbd "C-c y") 'plantilla)
;;; skeleton logo:
(global-set-key (kbd "C-c l") 'logo)
;;; Abre listado de archivos o directorios de forma rápida:
(global-set-key (kbd "C-c x") 'xah-open-file-fast)
;;; Crear backup del buffer actual:
(global-set-key (kbd "C-c v")'make-backup)
;;; Imprimir buffer a pdf con C-c p
(global-set-key (kbd "C-c p") 'pdf-save-buffer)
;;; Esconder/mostrar archivos ocultos:
(global-set-key (kbd "C-c w") 'dired-dotfiles-toggle)
;;; Mostrar consola al pulsar F5:
(global-set-key (kbd "<f5>") 'eshell)
;;; No cortar la palabra al final de la línia, clicando F6:
(global-set-key (kbd "<f6>") 'global-visual-line-mode)
;;; Mostar/esconder números de línia con F7 (Linum-Mode)
(global-set-key (kbd "<f7>") 'global-linum-mode)
;;; Abrir con app externa con F8:
(global-set-key (kbd "<f8>") 'external-app)
;;; lanzar blog de notas con F9:
(global-set-key (kbd "<f9>") 'remember)
;;; Lanzar el buffer scratch con C-c s:
(global-set-key (kbd "C-c s")
  (lambda()(interactive)(switch-to-buffer "*scratch*")))
;;; Abrir el tractatus
(global-set-key (kbd "C-t") 'tractatus)
;;; llançar el directori .emacs.d con C-c d:
(global-set-key (kbd "C-c 1")
  (lambda()(interactive)(find-file "~/.emacs.d")))
;;; Reabrir alguno de los últimos 25 buffer abiertos,
;;; incluso los cerrados:
(global-set-key (kbd "C-c 2") 'recentf-open-files)
;
;
;
;
;
;;;;;;;;;;;; Ajustes en las extensiones ;;;;;;;;;;;;
;
;
;;; blog de notas.
;;; Lanzar con M-x remember (o F9). C-c C-c para poner fecha y hora
;;; Crea el archivo ~/notes con todas las notas entradas:
;;; cd ~/.emacs.d
;;; git clone git://repo.or.cz/remember-el.git remember
(add-to-list 'load-path "~/.emacs.d/remember")
(require 'remember)
;
;;; Multi-term
;;; Abrir con M-x multi-term o con el atajo (C-c t o C-c T). Descargar de:
;;; http://www.emacswiki.org/emacs/download/multi-term.el
(autoload 'multi-term "multi-term" nil t)
(autoload 'multi-term-next "multi-term" nil t)
;;; que use bash
(setq multi-term-program "/bin/bash")
;
;;; package.el (emacs24)
;;; (http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el)
;;; Paquetes listos para instalar (tipo apt-get). M-x package-list-packages (update) M-x list-packages (llistar)
;;; Para activar el modo: M-x package-menu-mode
(add-to-list 'load-path (expand-file-name "~/.emacs.d/package.el"))
(require 'package)
(package-initialize)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))
;
;;; Referente al paquete ido:
(require 'ido)
;(setq ido-enable-flex-matching t)
;(setq ido-everywhere t)
(ido-mode 'buffers)
;;; Ignorar determinados buffers para que no salgan al pulsar C-x b
(setq ido-ignore-buffers '("^ " "*Completions*" "*Shell Command Output*"
                           "*Messages*" "Async Shell Command" "*scratch*"
                           "*tramp*"))
;;; Ver el listado vertical cuando se pulsa C-x b
;;; M-x package-install y entrar:   ido-vertical-mode el paquete está a MELPA
;(require 'ido-vertical-mode)
;(ido-mode 1)
;(ido-vertical-mode 1)
;
;;; Navegador w3m:
(setq w3m-home-page "http://google.es"
w3m-default-display-inline-images t
w3m-display-inline-image t
w3m-resize-images t
w3m-use-cookies t
w3m-cookie-accept-bad-cookies t)
;
;;; ssh
;;; Acceso ssh (C-x C-f /ssh:usuario@IP:/home/usuario):
(require 'tramp)
(setq tramp-default-method "ssh")
;;; activar variables para ver salida de problemas con tramp
(setq tramp-debug-buffer t)
(setq tramp-verbose 10)
;
;;; sudo:
;;; Forma de uso [C-x C-f /sudo::/etc/hosts]
;;; C-x C-f /sudo:root@localhost:/etc/hosts o C-x sudo-find-file
(defun sudo-find-file (file-name)
  "Like find file, but opens the file as root."
  (interactive "FSudo Find File: ")
  (let ((tramp-file-name (cocat "/sudo::" (expand-file-name file-name))))
    (find-file tramp-file-name)))
;
;
;;; Ajustar el prompt de eshell
;;; Modificar el prompt para mostrar el directorio de trabajo
;;; Para mostrar el usuario: (concat (getenv "USER")
(setq eshell-prompt-function
(lambda nil
(concat (eshell/pwd)
(if (= (user-uid) 0) " # " " $ "))))
;;; Especificar ruta a la shell que vamos a usar:
(setq explicit-shell-file-name "/bin/bash")
(setq shell-file-name explicit-shell-file-name)
;;; mensaje de bienvenida al entrar a la eshell:
(setq eshell-banner-message "\n... entrant a  emacs shell...\n\n")
;
;;; Colores:
;;; Poner esquemas de colores
(add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp/color-theme/"))
(require 'color-theme)
(color-theme-initialize)
;;; Esquema de color escogido:
;(color-theme-charcoal-black)
;(color-theme-calm-forest)
;(color-theme-lethe)
;(color-theme-oswald)
;(color-theme-taming-mr-arneson)
;(color-theme-jsc-dark)
;
;;; Reabrir algún buffer cerrado anteriormente
;;; El atajo de teclado es C-c 2
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-saved-items 200)
(setq recentf-max-menu-items 35)
;;; Limpiar listado al inicio si se visitan remotos:
;(setq recentf-auto-cleanup 'never)
;
;;; Activar tomar descansos cada determinado periodo de tiempo:
;;; type-break-mode activa/desactiva la extensión
(require 'type-break)
;;; Frecuencia para tomar descansos en segundos (1 hora) :
(setq type-break-interval (* 60 60))
;;; Para cada frecuencia anterior parar 5 minutos:
(setq type-break-good-rest-interval (* 60 5))
;
;;; Abrir con apps externas con "intro" (~/.emacs.d/lisp/openwith.el)
(require 'openwith)
(openwith-mode t)
(require 'mm-util)
(add-to-list 'mm-inhibit-file-name-handlers 'openwith-file-handler)
;
;;; Modo markdown
(add-to-list 'load-path "~/.emacs.d/lisp/markdown-mode")
(autoload 'markdown-mode "markdown-mode" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
;
;;; emacs-wget (http://www.filewatcher.com/m/emacs-wget.tbz.29-1.html)
;;; Las descargas a ~/download
(add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp/wget"))
(require 'wget)
(defvar wget-hide-status t
  "Default hide wget download window.")
;
;;; Modo latex
;;; Que cuando se cargue el mode mayor LaTeX se active automáticament RefTeX.
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
;;; Que AUCTeX delegue a RefTeX lo relativo a la generación de etiquetas.
(setq reftex-plug-into-AUCTeX t)
;;; Que AUCTeX detecte el uso de include o input
(setq-default TeX-master nil)
;;; Guardar automáticamente la compilación:
;(setq TeX-save-query nil)
;;; Analizar el documento al guardar:
(setq TeX-auto-save t)
;;; Analizar el documento al cargar:
(setq TeX-parse-self t)
;;; Para que los .tex se abran en latex-mode:
(add-to-list 'auto-mode-alist '("\\.tex$" . latex-mode))
;;; Corregir los comentarios mientras se escribe. No las etiquetas ni las variables:
;;; M-$ para ver opciones "i" para incorporar al diccionario.
(setq flyspell-mode nil)
;
;;; Imprimir
(setq lpr-command "enscript")
;;; list of strings to pass as extra options for the printer program
;(setq lpr-switches (list "--font=Courier10"
;                         "--no-header"
;                         "--encoding=pslatin1"))
;                   (format "--header=%s" (buffer-name))))
(setq printer-name "psc-1100-series")
;
;;; Escuchar música con emms:
(add-to-list 'load-path "~/.emacs.d/lips/")
(require 'emms)
(emms-standard)
(emms-default-players)
(setq emms-source-file-default-directory "~/musica_dades/")
(require 'emms-streams)
(setq emms-player-list '(emms-player-mplayer
			 emms-player-mplayer-playlist
			 emms-player-mpg321))
(define-emms-simple-player mplayer '(file url)
  (regexp-opt '(".ogg" ".mp3" ".wav" ".mpg" ".mpeg" ".wmv" ".wma"
		".mov" ".avi" ".divx" ".ogm" ".asf" ".mkv" "http://" "mms://"
		".rm" ".rmvb" ".mp4" ".flac" ".vob" ".m4a" ".flv" ".ogv" ".pls"))
        "mplayer" "-slave" "-quiet" "-really-quiet" "-fullscreen")
;
;;; Limpiar con antiword ficheros .doc (apt-get install antiword)
;;; http://www.emacswiki.org/emacs/download/no-word.el
(autoload 'no-word "no-word" "word to txt")
(add-to-list 'auto-mode-alist '("\\.doc$" . no-word))
;
;
;;;;;;;;; FIN PRIMERA PARTE... CONTINUA EN ~/.gnu-emacs ;;;;;;;;;;;
;
;; Pour que la recherche soit visible.
(setq-default search-highlight t)
(copy-face 'highlight 'isearch)
