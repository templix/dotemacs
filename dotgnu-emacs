;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;; CONTINUACIÓN DE .emacs ;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Añadir automáticamente paréntesis, llave y comillas
;;; de cierre al insertar la de apertura.
(setq skeleton-pair t)
(global-set-key "[" 'skeleton-pair-insert-maybe)
(global-set-key "(" 'skeleton-pair-insert-maybe)
(global-set-key "{" 'skeleton-pair-insert-maybe)
(global-set-key "'" 'skeleton-pair-insert-maybe)
;
;
;;; Plantillas skeleton ;;;;;;;;;;;;;;;;
(define-skeleton logo
  "Cabecera (C-c l)"
  "logo: "
  ";;                   ___ _ __ ___   __ _  ___ ___                  \n"
  ";;                  / _ \\ '_ ` _ \\ / _` |/ __/ __|                 \n"
  ";;                 |  __/ | | | | | (_| | (__\\__ \\                 \n"
  ";;                (_)___|_| |_| |_|\\__,_|\\___|___/                 \n"
  ";;                               .-.                               \n"
  ";; =--------------------------   /v\\  ----------------------------=\n"
  ";; = lapipaplena.org            // \\\\              templix@gmx.es =\n"
  ";; =-----------------          /(   )\\        --------------------=\n"
  ";; =                            ^^-^^                             =\n"
  ";; =         https://tractatuslapipaplena.herokuapp.com/          =\n"
  ";; =--------------------------------------------------------------=\n")
;
;;; Plantillas  skeleton para latex:
(define-skeleton dialeg
  "Para los diálegos de los personages(C-c d)"
  "dialeg: "
  "\\begin{quote}\n"
  "  \\textsl{ }\n"
  "\n "
  "\\end{quote}\n")
;;;
(define-skeleton quadre
  "Quadros de opciones(C-c q)"
  "quadre: "
  "\\begin{table}[htb]\n"
  "\\centering\n"
  "\\begin{tabular}{||l | c || c | l ||}\n"
  "\\hline\n"
  "\n "
  "\\hline\n"
  "\\end{tabular}\n"
  "\\caption{   }\n"
  "\\end{table}\n")
;;;
(define-skeleton argument
  "El argumento general(C-c z)"
  "argument: "
  "\\vspace{15mm}\n"
  "\\hline\n"
  "\n "
  "\\hline\n"
  "\\begin{center}\n"
  "\\Ovalbox{\\large\\bf ...}\n"
  "\\end{center}\n")
;;;
(define-skeleton plantilla
	"Plantilla encabezado latex (C-c u)"
	"Plantilla: "
"\\documentclass[a4paper,openright,oneside,12pt]{book}\n"
"\\usepackage{geometry}\n"
"\\usepackage{url}\n"
"\\usepackage[spanish]{babel}\n"
"\\usepackage[T1]{fontenc}\n"
"\\usepackage{textcomp}\n"
"\\usepackage[utf8]{inputenc}\n"
"\\usepackage{fancybox}\n"
"\\usepackage{framed}\n"
"\\usepackage{wedn}\n"
"\\usepackage{utopia}\n"
"\\usepackage{pbsi}\n"
"\\usepackage{suetterl}\n"
"\\usepackage{verbatim}\n"
"\\usepackage{url}\n"
"\\usepackage{setspace}\n"
"\\usepackage[framemethod=tikz]{mdframed}\n"
"\\usepackage{incgraph}\n"
"\\usepackage{xcolor}\n"
"\\usepackage{colortbl}\n"
"\\usepackage{multirow}\n"
"\\usepackage{wrapfig}\n"
"\\usepackage{fancyvrb}\n"
"\\usepackage{lipsum}\n"
"\\usepackage{fullpage}\n"
"\\usepackage{listings}\n"
"\\usepackage{graphicx}\n"
"\\usepackage{parskip}\n"
"\\textheight=25cm\n"
"\\textwidth=18cm\n"
"\\oddsidemargin=-1cm\n"
"\\topmargin=-1cm\n"
"\n"
"\\begin{document}\n"
"\n"
"\n"
"\n"
"\\end{document}\n")
;
;
;
;
;;;;;;;;;;; FUNCIONES ;;;;;;;;;;;;;;;;;;;;;;
;
;
;;; Poner el cursor sobre una URL de un texto y abrirla al firefox (función)
;;; El atajo de teclado es C-c b
(defun w3mext-open-link-or-image-or-url ()
;    "Opens the current link or image or current page's uri or any
;url-like text under cursor in firefox."
    (interactive)
    (let (url)
      (if (string= major-mode "w3m-mode")
	          (setq url (or (w3m-anchor) (w3m-image)
				w3m-current-url)))
          (browse-url-firefox (if url url (car
					   (browse-url-interactive-arg
					    "URL: "))))
	  ))
;
;;; Abrir archivos o directorios de forma rápida (C-c x).
(require 'ido)
(defvar xah-filelist nil "Lista de archivos o directorios que permite
abrirlos de forma rápida.")
(setq xah-filelist
      '(
        ("telegram" . "~/.telegram-cli/downloads" )
        ("backups" . "/media/DADES/dades/arxius_importants/" )
        ("tractatus" . "~/tractatus/tractatus.txt" )
        ;; Más entradas ...
        ) )
;
;;; Otra forma de acceder a determinados archivos.
;;; Pulsando "C-x r j" y la letra que indica después del interrogante
;;; Ejemplo: "C-x r j e" para ir a .emacs.d
(mapcar
 (lambda (r)
   (set-register (car r) (cons 'file (cdr r))))
 '((?l . "~/.config/openbox/lxde-rc.xml")
   (?b . "~/.bashrc")))
;
(defun xah-open-file-fast (openCode)
  "Función para abrir el archivo o directorio predefinido"
  (interactive
   (list (ido-completing-read "Open:" (mapcar (lambda (x) (car x))
					      xah-filelist)))
   )
  (find-file (cdr (assoc openCode xah-filelist))))
;
;;; Crear backup del buffer abierto. El nombre será del tipo:
;;; nombre~<date>~ en el mismo directorio. Si existe, se sobreescribe
;;; La drecerqa de teclat és: C-c v
(defun crear-backup ()
  (interactive)
  (if (buffer-file-name)
      (let* ((currentName (buffer-file-name))
             (backupName (concat currentName "-" (format-time-string
                                                  "%Y%m%d_%M%S")
				  ".old")))
        (copy-file currentName backupName t)
        (message (concat "El backup se guarda con el nombre: " (file-name-nondirectory
					      backupName))))
    (user-error "El buffer no es un archivo.")
    ))
;
;;; Copiar la ruta del archivo del presente buffer (Pegarla con C-x y):
(defun copy-file-path (&optional φdir-path-only-p)
  "Copy the current buffer's file path or dired path to `kill-ring'.
If `universal-argument' is called, copy only the dir path."
  (interactive "P")
  (let ((fPath
         (if (equal major-mode 'dired-mode)
             default-directory
           (buffer-file-name))))
    (kill-new
     (if (equal φdir-path-only-p nil)
         fPath
       (file-name-directory fPath))))
  (message "Ruta del archivo copiada."))
;
;;; Varias funciones para pasar buffers a pdf.
(defun pdf-save-buffer (quiet filename)
    "Save buffer as a pdf file.
With prefix arg (C-u), display of output is suppressed.
'quiet' is set by the prefix argument
'filename' is interactively prompted"
    (interactive "P\nGGuardar como: ")
    (if (file-directory-p filename)
	(setq filename (concat (buffer-name) ".pdf")))
    (if (get-buffer "*PostScript*") (kill-buffer "*PostScript*"))
    (ps-spool-buffer)
    (set-buffer "*PostScript*")
    (shell-command-on-region 1 (point-max)
			     (format "ps2pdf - %s" filename))
    (if (not quiet) (find-file filename))
    )
;
(defun pdf-save-buffer-with-faces (quiet filename)
    "Save buffer as a pdf file with faces.
With prefix arg (C-u), display of output is suppressed.
'quiet' is set by the prefix argument
'filename' is interactively prompted"
    (interactive "P\nGGuardar como: ")
    (if (file-directory-p filename)
	(setq filename (concat (buffer-name) ".pdf")))
    (if (get-buffer "*PostScript*") (kill-buffer "*PostScript*"))
    (ps-spool-buffer-with-faces)    (set-buffer "*PostScript*")
    (shell-command-on-region 1 (point-max)
			     (format "ps2pdf - %s" filename))
    (if (not quiet) (find-file filename))
    )
;
(defun pdf-save-region (quiet filename start end)
    "Save region as a pdf file.
With prefix arg (C-u), display of output is suppressed.
'quiet' is set by the prefix argument
'filename' is interactively prompted"
    (interactive "P\nGGuardar como: \nr")
    (if (file-directory-p filename)
	(setq filename (concat (buffer-name) ".pdf")))
    (if (get-buffer "*PostScript*") (kill-buffer "*PostScript*"))
    (ps-spool-region start end)
    (set-buffer "*PostScript*")
    (shell-command-on-region 1 (point-max)
			     (format "ps2pdf - %s" filename))
    (if (not quiet) (find-file filename))
    )
;
(defun pdf-save-region-with-faces (quiet filename start end)
    "Save region as a pdf file with faces.
With prefix arg (C-u), display of output is suppressed.
'quiet' is set by the prefix argument
'filename' is interactively prompted"
    (interactive "P\nGGuardar como: \nr")
    (if (file-directory-p filename)
	(setq filename (concat (buffer-name) ".pdf")))
    (if (get-buffer "*PostScript*") (kill-buffer "*PostScript*"))
    (ps-spool-region-with-faces start end)
    (set-buffer "*PostScript*")
    (shell-command-on-region 1 (point-max)
			     (format "ps2pdf - %s" filename))
    (if (not quiet) (find-file filename))
    )
;
;;; Función para insertar la fecha:
(defun insert-date ()
  "Inserta dia semana, fecha dd-mm-yyyy y hora, minutos y segundos"
  (interactive)
  (when (use-region-p)
    (delete-region (region-beginning) (region-end) )
    )
  (insert (format-time-string "%a-%x--%A")))
;
;;; Función para copiar una linea al portapapeles:
(defun copy-line (arg)
  "Copiar linea al portapapeles"
  (interactive "p")
  (kill-ring-save (line-beginning-position)
		  (line-beginning-position (+ 1 arg)))
  (message "%d line%s copied" arg (if (= 1 arg) "" "s")))
;
;;; Apps externas:
;;; En dired, Para arrancar apps externas clicando F8 o M-x external-app:
(defun external-app ()
 "Abrir archivo con apps externas."
  (interactive)
  (let* ((file (dired-get-filename nil t)))
    (call-process "xdg-open" nil 0 nil file)))
;;; Obrir carpeta amb "M-x open-dir":
(defun open-dir ()
  "Show current dir"
  (interactive)
  (cond ((let ((process-connection-type nil)) (start-process "" nil "nautilus" ".")))))
;
;;; En dired, función para mostrar/esconder archivos ocultos clicando C-c w
(defun dired-dotfiles-toggle ()
  "Show/hide dot-files"
  (interactive)
  (when (equal major-mode 'dired-mode)
    (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
        (progn
          (set (make-local-variable 'dired-dotfiles-show-p) nil)
          (message "h")
          (dired-mark-files-regexp "^\\\.")
          (dired-do-kill-lines))
      (progn (revert-buffer) ; otherwise just revert to re-show
                    (set (make-local-variable 'dired-dotfiles-show-p) t)))))
;
;;; Copi/paste emacs --> X i X --> emacs
;;; http://hugoheden.wordpress.com/2009/03/08/copypaste-with-emacs-in-terminal/
(setq x-select-enable-clipboard t)
(unless window-system
 (when (getenv "DISPLAY")
 (defun xsel-cut-function (text &optional push)
    (with-temp-buffer
    (insert text)
    (call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
 (defun xsel-paste-function()
    (let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
      (unless (string= (car kill-ring) xsel-output)
        xsel-output )))
    (setq interprogram-cut-function 'xsel-cut-function)
    (setq interprogram-paste-function 'xsel-paste-function)))
;
;;; Algunas funciones de wget:
(defun wget-hide ()
  "Hide wget download information."
  (interactive)
  (if (bufferp (get-buffer wget-process-buffer))
      (delete-window (get-buffer-window (get-buffer wget-process-buffer))))
  (setq wget-hide-status t))
(defun wget-show ()
  (interactive)
  (call-interactively 'wget-state-of-progress)
  (setq wget-hide-status nil))
(provide 'wget-extension)
;
;;; Mover lineas arriba o abajo. Por defecto sin especificar cantidad, una.
;;;  C-u 4 M-x move-line-down (4 lineas abajo)
(defun move-line (n)
  "Mover la linea arriba o abajo N lineas."
  (interactive "p")
  (let ((col (current-column))
        start
        end)
    (beginning-of-line)
    (setq start (point))
    (end-of-line)
    (forward-char)
    (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; Restaurar linea y columna original
      (forward-line -1)
      (forward-char col))))
;
(defun move-line-up (n)
  "Mover linea N lineas arriba."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))
;
(defun move-line-down (n)
  "Mover linea N lineas bajo."
  (interactive "p")
    (move-line (if (null n) 1 n)))
;
;;; Buscar en la página de google del navegador por defecto
;;;  la palabra sobra la que esté el cursor:
(defun google-define ()
  "Buscar en google la palabra bajo el cursor."
  (interactive)
  (browse-url
(concat "http://www.google.com.pe/search?hl=en&q=define%3A"
                       (thing-at-point 'word))))
;
;;; Función para abrir directamente el tractatus con C-t:
(defun tractatus ()
  "Obrir el tractatus `~/tractatus/tractatus.txt'."
    (interactive)
      (find-file "~/tractatus/tractatus.txt"))
;
;;; Abrir mi .bashrc:
(defun bashrc ()
  "Abrir `~/.bashrc'."
  (interactive)
    (find-file "~/.bashrc"))
;
;;; Función para abrir archivos con privilegios de administrador
(defun sudo-open-file (file)
  "Abrir archivo com privilegios de root"
  (interactive "FFind file: ")
  (set-buffer
   (find-file
    (concat "/sudo::"
            (expand-file-name file)))))
;
;
;
;;;;;;;;;;;;;;;;; PRUEBAS A PARTIR DE AQUÍ;;;;;;;;;;;;;;;
;
